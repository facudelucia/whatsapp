{"version":3,"sources":["Chat.js","SidebarChat.js","Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Chat","useState","input","setInput","messages","setMessages","sendMessage","e","a","preventDefault","message","name","timestamp","received","className","Avatar","IconButton","SearchOutlined","AttachFile","MoreVert","map","onSubmit","value","onChange","target","placeholder","type","onClick","SidebarChat","Sidebar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0cAgFeA,MAxEf,WAAiB,IAAD,EACcC,mBAAS,IADvB,mBACLC,EADK,KACEC,EADF,OAEoBF,mBAAS,IAF7B,mBAELG,EAFK,KAEKC,EAFL,KAQNC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDAChBD,EAAEE,iBACY,KAAVP,EAFY,iDAGhBG,EAAY,GAAD,mBAAKD,GAAL,CAAe,CACtBM,QAASR,EACTS,KAAM,WACNC,UAAW,YACXC,UAAU,MAEdV,EAAS,IATO,2CAAH,sDAYjB,OAEI,yBAAKW,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,oBACX,6CACA,+CAEJ,yBAAKA,UAAU,qBACX,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,OAEJ,kBAACD,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,OAEJ,kBAACF,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,SAIZ,yBAAKL,UAAU,cACVV,EAASgB,KAAI,SAACV,GAAD,OACV,uBAAGI,UAAU,gCACT,0BAAMA,UAAU,cAAcJ,EAAQC,MACrCD,EAAQA,QACT,0BAAMI,UAAU,mBAAmBJ,EAAQE,gBAIvD,yBAAKE,UAAU,gBACX,kBAAC,IAAD,MACA,0BAAMO,SAAUf,GACZ,2BACIgB,MAAOpB,EACPqB,SAnDC,SAAChB,GAClBJ,EAASI,EAAEiB,OAAOF,QAoDFG,YAAY,iBACZC,KAAK,SAGT,kBAACV,EAAA,EAAD,KACI,kBAAC,IAAD,CAAUW,QAASrB,MAI3B,kBAAC,IAAD,S,iECzDDsB,MAZf,WACI,OACI,yBAAKd,UAAU,eACX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,qBACX,yCACA,0DC8BDe,EAhCC,WACZ,OACI,yBAAKf,UAAU,WACX,yBAAKA,UAAU,mBACX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,wBACX,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,SAIZ,yBAAKF,UAAU,mBACX,yBAAKA,UAAU,4BACX,kBAACG,EAAA,EAAD,MACA,2BAAOS,KAAK,OAAOD,YAAY,+BAGvC,yBAAKX,UAAU,kBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCnBDgB,MAZf,WAEE,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtC,c","file":"static/js/main.ca09d4cd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport { AttachFile, MoreVert, SearchOutlined } from '@material-ui/icons'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport \"./Chat.css\"\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nfunction Chat() {\r\n    const [input, setInput] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault()\r\n        if (input === \"\") return\r\n        setMessages([...messages, {\r\n            message: input,\r\n            name: \"demo app\",\r\n            timestamp: \"just now!\",\r\n            received: false\r\n        }])\r\n        setInput(\"\")\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar />\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>Facu De Lucia</h3>\r\n                    <p>Last seen at...</p>\r\n                </div>\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__body\">\r\n                {messages.map((message) => (\r\n                    <p className=\"chat__message chat__reciever\">\r\n                        <span className=\"chat__name\">{message.name}</span>\r\n                        {message.message}\r\n                        <span className=\"chat__timeStamp\">{message.timestamp}</span>\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon />\r\n                <form onSubmit={sendMessage}>\r\n                    <input\r\n                        value={input}\r\n                        onChange={handleChange}\r\n\r\n                        placeholder=\"Type a message\"\r\n                        type=\"text\"\r\n                    />\r\n                    {/* <button  type=\"submit\" placeholder=\"Send a message\"></button> */}\r\n                    <IconButton>\r\n                        <SendIcon onClick={sendMessage} />\r\n                    </IconButton>\r\n\r\n                </form>\r\n                <MicIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","\r\nimport React from 'react'\r\nimport \"./SidebarChat.css\"\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nfunction SidebarChat() {\r\n    return (\r\n        <div className=\"sidebarChat\">\r\n            <Avatar />\r\n            <div className=\"sidebarChat__info\">\r\n                <h2>Room name</h2>\r\n                <p>This is the last message</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React from 'react';\r\nimport \"./Sidebar.css\"\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {Avatar, IconButton} from \"@material-ui/core\";\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport SidebarChat from './SidebarChat';\r\n\r\nconst Sidebar = () => {\r\n    return ( \r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input type=\"text\" placeholder=\"Search or start new chat\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat />\r\n                <SidebarChat />\r\n                <SidebarChat />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Sidebar;","import React from 'react';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar';\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__body\">\r\n        <Sidebar />\r\n        <Chat />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}